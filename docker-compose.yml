version: '3.8'

services:
  reverse-proxy:
    build: .
    container_name: reverse-proxy
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./proxy-config.yaml:/config/proxy-config.yaml:ro
      - ./certs:/certs
      - ./logs:/logs
    environment:
      - TZ=Europe/Paris
    networks:
      - proxy-network
    healthcheck:
      test: ["CMD", "/reverse-proxy", "-health-check"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s
    depends_on:
      - app1
      - app2

  # Applications d'exemple pour les tests
  app1:
    image: nginx:alpine
    container_name: app1-backend
    restart: unless-stopped
    volumes:
      - ./examples/app1:/usr/share/nginx/html:ro
    networks:
      - proxy-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 5s
      retries: 3

  app2:
    image: nginx:alpine
    container_name: app2-backend
    restart: unless-stopped
    volumes:
      - ./examples/app2:/usr/share/nginx/html:ro
    networks:
      - proxy-network
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/"]
      interval: 30s
      timeout: 5s
      retries: 3

  # Service de monitoring (optionnel)
  monitoring:
    image: prom/prometheus:latest
    container_name: prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - proxy-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning:ro
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      - proxy-network
    profiles:
      - monitoring
    depends_on:
      - monitoring

networks:
  proxy-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  prometheus_data:
  grafana_data:

---
# Configuration pour le développement
# Fichier: docker-compose.dev.yml
version: '3.8'

services:
  hnproxy:
    build:
      context: .
      dockerfile: Dockerfile.dev
    volumes:
      - .:/app
      - /app/build  # Exclure le dossier build
    environment:
      - ENV=development
    ports:
      - "8080:8080"
    command: ["go", "run", ".", "-config", "/app/proxy-config.yaml"]

  # Serveurs de test simple pour le développement
  test-backend-1:
    image: httpd:alpine
    container_name: test-backend-1
    ports:
      - "3001:80"
    volumes:
      - ./examples/backend1:/usr/local/apache2/htdocs:ro

  test-backend-2:
    image: httpd:alpine
    container_name: test-backend-2
    ports:
      - "3002:80"
    volumes:
      - ./examples/backend2:/usr/local/apache2/htdocs:ro